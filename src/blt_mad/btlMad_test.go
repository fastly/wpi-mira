package blt_mad

import (
	"testing"
)

/*NOTE: because of the findMedian function the expected results needs to be in an increasing order*/

/*func TestZeroArray10(t *testing.T) {
	tau := 10.0
	data1 := []float64{0.0, 0.0, 0.0, 0.0}
	expected1 := []float64{}
	result1 := BltMad(data1, tau)
	if !equalSlices(expected1, result1) {
		t.Errorf("Test case 1 failed. Got: %f, Expected: %f", result1, expected1)
	}
}*/

func TestArray0(t *testing.T) {
	tau := 0.0

	//repeating values
	data1 := []float64{3, 1, 8, 1}
	expected1 := []float64{3.0, 8.0}
	result1 := BltMad(data1, tau)
	if !equalSlices(expected1, result1) {
		t.Errorf("Test case 1 failed. Got: %f, Expected: %f", result1, expected1)
	}

	data2 := []float64{3, 1, 8, 1, 5, 7}
	expected2 := []float64{5.0, 7.0, 8.0}
	result2 := BltMad(data2, tau)
	if !equalSlices(expected2, result2) {
		t.Errorf("Test case 2 failed. Got: %f, Expected: %f", result2, expected2)
	}
}

func TestArray3(t *testing.T) {
	tau := 3.0

	//repeating values
	data1 := []float64{3, 1, 8, 1}
	expected1 := []float64{8.0}
	result1 := BltMad(data1, tau)
	if !equalSlices(expected1, result1) {
		t.Errorf("Test case 1 failed. Got: %f, Expected: %f", result1, expected1)
	}

	data2 := []float64{3, 1, 8, 1, 5, 7}
	expected2 := []float64{5.0, 7.0, 8.0}
	result2 := BltMad(data2, tau)
	if !equalSlices(expected2, result2) {
		t.Errorf("Test case 2 failed. Got: %f, Expected: %f", result2, expected2)
	}
}

func TestBGP10(t *testing.T) {
	tau := 10.0
	// Test case 1: all zero
	data1 := []float64{0.0, 0.0, 0.0, 0.0}
	expected1 := []float64{}
	result1 := BltMad(data1, tau)
	if !equalSlices(expected1, result1) {
		t.Errorf("Test case 1 failed. Got: %f, Expected: %f", result1, expected1)
	}

	//Test case 2: bgp data 1
	data2 := convertToFloat64Array("782 958 830 832 952 852 923 1008 1041 974 943 1013 943 1151 769 1236 819 698 730 849 871 632 522 664 574 614 659 515 901 939 438 2942 1406 14065 5771 3622 1047 2111 1813 2761 1587 1158 786 1070 1040 778 783 912 716 913 937 863 836 791 898 834 909 812 16974 805 1229 1189 851 889 767 838 711 894 812 853 930 1045 858 1025 784 2083 1061 809 877 800 740 806 811 1023 1252 1149 838 986 969 728 819 689 880 754 836 1176 867 879 2602 662 737 888 723 983 858 876 740 771 810 1005 791 845 942 750 727 938 815 1067 1068 788 687 770 836 1032 889 1030 1049 1042 1020 1113 875 777 877 1017 1018 1236 856 989 918 821 684 790 773 955 927 828 748 924 996 985 926 853 738 844 802 639 822 859 777 850 738 696 975 1183 803 936 826 958 910 855 872 799 809 882 951 758 781 816 543 873 751 786 680 860 871 962 893 629 912 766 847 642 702 925 881 2498 3435 25746 5521 833 804 701 530 804 737 802 532 672 655 2805 835 681 739 641 836 826 812 909 1193 873 540 829 763 894 973 2")
	expected2 := []float64{14065.0, 16974.0, 25746.0}
	result2 := BltMad(data2, tau)
	if !equalSlices(expected2, result2) {
		t.Errorf("Test case 2 failed. Got: %f, Expected: %f", result2, expected2)
	}

	//Test case 3: bgp data 2
	data3 := convertToFloat64Array("1299 637 535 829 825 447 562 761 1028 788 918 977 810 654 554 397 473 368 582 522 530 433 653 486 625 479 713 731 488 692 518 465 896 625 687 704 666 767 632 892 601 554 602 441 578 565 722 604 447 561 550 591 578 1595 1987 450 512 805 678 536 811 895 1099 571 552 392 509 615 630 639 559 691 1309 554 926 553 473 715 465 505 726 833 632 596 550 631 1016 836 939 1086 1045 563 693 402 487 544 836 576 588 546 748 624 687 613 895 820 645 666 574 502 634 341 506 462 40552 817 1415 317 122393 4146 3468 613 6055 354 533 2931 535 6627 6918 6859 1970 1199 5209 5053 443 3102 453 18547 475 439 1131 708 2699 14028 18914 18984 16322 20613 24264 23391 10482 4600 2368 2471 2018 1333 1607 1888 1993 1850 1714 3804 1749 2404 722 936 1108 1471 809 820 1699 1680 1135 873 1023 1231 1128 1000 1112 1163 976 788 902 2898 1073 986 1470 531 598 516 515 481 538 768 676 596 502 518 570 497 473 491 488 619 676 462 486 722 712 391 463 434 553 541 686 524 493 425 550 560 482 584 509 630 554 385 565 517 605 433 608 411 525 542 678 521 525 358 684 422 1742 511 604 511 485 376 464 385 634 710 472 434 421 469 565 511 462 429 498 421 530 492 479 554 576 377 459 551 612 462 464 455 563 679 652 533 479 812 981 627 522 426 495 525 512 537 488 483 362 783 463 522 374 431 566 510 787 1214 1238 1045 978 917 728 600 446 619 504 874 861 35956 790 341 540 1240 118534 3391 1758 1687 3880 339 829 5775 371 653 354 435 6034 2731 1027 627 408 423 14291 315 4698 9423 19043 17045 20954 15955 17328 24117 12745 7667 10102 3472 2246 1588 2447 3962 1929 2067 2366 2902 1287 781 736 991 726 900 2185 1613 602 703 913 2700 963 865 924 743 1526 668 880 887 1872 1163 1432 1071 704 570 511 527 1267 861 913 645 468 480 566 602 534 592 535 500 464 612 526 731 622 746 525 447 506 538 746 592 407 478 343 489 503 478 626 615 640 603 405 537 582 647 747 480 436 632 455 378 477 537 468 737 818 520 546 556 506 1")
	expected3 := []float64{35956.0, 40552.0, 118534.0, 122393.0}
	result3 := BltMad(data3, tau)
	if !equalSlices(expected3, result3) {
		t.Errorf("Test case 3 failed. Got: %f, Expected: %f", result3, expected3)
	}

	//Test case 4: bgp data 3
	data4 := convertToFloat64Array("1690 1257 1231 934 887 901 834 1188 1213 1025 948 782 893 1893 917 1235 1469 795 1043 1009 1026 675 685 1293 870 945 1484 1023 1177 1900 1385 1528 1291 1481 1564 1361 1070 1217 1164 994 1129 1224 1342 1009 1847 745 1070 960 962 1052 798 724 841 1031 963 1189 871 1436 1013 1149 1403 1083 1018 1435 1036 1052 1100 1499 1448 1119 1547 1129 1152 1197 2909 2053 935 1294 1219 890 1330 1669 1293 1189 1236 1213 956 1484 1151 1232 1231 1742 1171 1114 1167 1330 1834 844 907 932 1233 1085 1618 873 757 829 1481 1976 1129 966 1387 1322 1248 1580 1727 2509 1063 1307 1078 1038 767 1283 1655 1875 954 1094 1055 1584 1654 1990 4166 3888 1108 1440 2228 1683 1529 2542 822 1168 2002 2864 1323 1150 1213 1238 1076 800 779 1492 2640 1492 1051 1456 847 695 792 1186 1396 1630 1163 1467 2305 871 1597 1693 2357 1728 2132 1256 2314 955 1511 1609 1296 858 2701 2436 982 1090 1256 1105 965 1828 2555 1184 1295 1194 839 839 1000 1051 959 883 848 1001 2438 1635 1789 1886 1368 2051 991 1251 1412 1839 1573 1445 1495 1434 1357 1162 1049 937 1662 2122 978 1120 1012 952 1117 1148 1192 1786 1079 1188 1735 1071 1056 1261 1862 1133 1076 999 963 1112 1219 1452 1158 912 1092 980 1072 1158 997 1430 1410 883 1127 1129 2034 1667 848 806 1044 1419 1063 1084 1352 1563 1645 1947 1044 1049 1426 1343 1239 926 1876 1614 1155 1727 1523 1439 1389 1351 1884 887 833 1291 1044 2802 1503 1266 1686 1587 976 1057 953 1413 1279 1920 2352 1335 1068 1137 1101 1115 1031 1393 1182 1697 1190 1333 1423 1339 1169 1653 925 1223 1021 1669 914 887 810 1196 1759 2035 2084 1821 1157 1877 1860 1709 1649 1404 1450 1216 1860 1191 1760 1449 1189 1062 964 1135 874 1062 2802 1598 1190 1126 1000 1123 1068 1166 1057 828 906 756 562 584 480 447 599 1029 593 633 695 713 739 675 860 1104 1244 1116 928 914 513 765 599 625 921 1243 741 1100 1219 668 773 505 449 616 609 671 530 512 753 632 665 840")
	expected4 := []float64{2314.0, 2352.0, 2357.0, 2436.0, 2438.0, 2509.0, 2542.0, 2555.0, 2640.0, 2701.0, 2802.0, 2802.0, 2864.0, 2909.0, 3888.0, 4166.0}
	result4 := BltMad(data4, tau)
	if !equalSlices(expected4, result4) {
		t.Errorf("Test case 4 failed. Got: %f, Expected: %f", result4, expected4)
	}

}

func TestBGP100(t *testing.T) {
	tau := 100.0 //the outputs should be empty arrays when the sensitivity parameter is too large
	//Test case 2: bgp data 1
	data2 := convertToFloat64Array("782 958 830 832 952 852 923 1008 1041 974 943 1013 943 1151 769 1236 819 698 730 849 871 632 522 664 574 614 659 515 901 939 438 2942 1406 14065 5771 3622 1047 2111 1813 2761 1587 1158 786 1070 1040 778 783 912 716 913 937 863 836 791 898 834 909 812 16974 805 1229 1189 851 889 767 838 711 894 812 853 930 1045 858 1025 784 2083 1061 809 877 800 740 806 811 1023 1252 1149 838 986 969 728 819 689 880 754 836 1176 867 879 2602 662 737 888 723 983 858 876 740 771 810 1005 791 845 942 750 727 938 815 1067 1068 788 687 770 836 1032 889 1030 1049 1042 1020 1113 875 777 877 1017 1018 1236 856 989 918 821 684 790 773 955 927 828 748 924 996 985 926 853 738 844 802 639 822 859 777 850 738 696 975 1183 803 936 826 958 910 855 872 799 809 882 951 758 781 816 543 873 751 786 680 860 871 962 893 629 912 766 847 642 702 925 881 2498 3435 25746 5521 833 804 701 530 804 737 802 532 672 655 2805 835 681 739 641 836 826 812 909 1193 873 540 829 763 894 973 2")
	expected2 := []float64{}
	result2 := BltMad(data2, tau)
	if !equalSlices(expected2, result2) {
		t.Errorf("Test case 2 failed. Got: %f, Expected: %f", result2, expected2)
	}

	//Test case 3: bgp data 2
	data3 := convertToFloat64Array("1299 637 535 829 825 447 562 761 1028 788 918 977 810 654 554 397 473 368 582 522 530 433 653 486 625 479 713 731 488 692 518 465 896 625 687 704 666 767 632 892 601 554 602 441 578 565 722 604 447 561 550 591 578 1595 1987 450 512 805 678 536 811 895 1099 571 552 392 509 615 630 639 559 691 1309 554 926 553 473 715 465 505 726 833 632 596 550 631 1016 836 939 1086 1045 563 693 402 487 544 836 576 588 546 748 624 687 613 895 820 645 666 574 502 634 341 506 462 40552 817 1415 317 122393 4146 3468 613 6055 354 533 2931 535 6627 6918 6859 1970 1199 5209 5053 443 3102 453 18547 475 439 1131 708 2699 14028 18914 18984 16322 20613 24264 23391 10482 4600 2368 2471 2018 1333 1607 1888 1993 1850 1714 3804 1749 2404 722 936 1108 1471 809 820 1699 1680 1135 873 1023 1231 1128 1000 1112 1163 976 788 902 2898 1073 986 1470 531 598 516 515 481 538 768 676 596 502 518 570 497 473 491 488 619 676 462 486 722 712 391 463 434 553 541 686 524 493 425 550 560 482 584 509 630 554 385 565 517 605 433 608 411 525 542 678 521 525 358 684 422 1742 511 604 511 485 376 464 385 634 710 472 434 421 469 565 511 462 429 498 421 530 492 479 554 576 377 459 551 612 462 464 455 563 679 652 533 479 812 981 627 522 426 495 525 512 537 488 483 362 783 463 522 374 431 566 510 787 1214 1238 1045 978 917 728 600 446 619 504 874 861 35956 790 341 540 1240 118534 3391 1758 1687 3880 339 829 5775 371 653 354 435 6034 2731 1027 627 408 423 14291 315 4698 9423 19043 17045 20954 15955 17328 24117 12745 7667 10102 3472 2246 1588 2447 3962 1929 2067 2366 2902 1287 781 736 991 726 900 2185 1613 602 703 913 2700 963 865 924 743 1526 668 880 887 1872 1163 1432 1071 704 570 511 527 1267 861 913 645 468 480 566 602 534 592 535 500 464 612 526 731 622 746 525 447 506 538 746 592 407 478 343 489 503 478 626 615 640 603 405 537 582 647 747 480 436 632 455 378 477 537 468 737 818 520 546 556 506 1")
	expected3 := []float64{}
	result3 := BltMad(data3, tau)
	if !equalSlices(expected3, result3) {
		t.Errorf("Test case 3 failed. Got: %f, Expected: %f", result3, expected3)
	}

	//Test case 4: bgp data 3
	data4 := convertToFloat64Array("1690 1257 1231 934 887 901 834 1188 1213 1025 948 782 893 1893 917 1235 1469 795 1043 1009 1026 675 685 1293 870 945 1484 1023 1177 1900 1385 1528 1291 1481 1564 1361 1070 1217 1164 994 1129 1224 1342 1009 1847 745 1070 960 962 1052 798 724 841 1031 963 1189 871 1436 1013 1149 1403 1083 1018 1435 1036 1052 1100 1499 1448 1119 1547 1129 1152 1197 2909 2053 935 1294 1219 890 1330 1669 1293 1189 1236 1213 956 1484 1151 1232 1231 1742 1171 1114 1167 1330 1834 844 907 932 1233 1085 1618 873 757 829 1481 1976 1129 966 1387 1322 1248 1580 1727 2509 1063 1307 1078 1038 767 1283 1655 1875 954 1094 1055 1584 1654 1990 4166 3888 1108 1440 2228 1683 1529 2542 822 1168 2002 2864 1323 1150 1213 1238 1076 800 779 1492 2640 1492 1051 1456 847 695 792 1186 1396 1630 1163 1467 2305 871 1597 1693 2357 1728 2132 1256 2314 955 1511 1609 1296 858 2701 2436 982 1090 1256 1105 965 1828 2555 1184 1295 1194 839 839 1000 1051 959 883 848 1001 2438 1635 1789 1886 1368 2051 991 1251 1412 1839 1573 1445 1495 1434 1357 1162 1049 937 1662 2122 978 1120 1012 952 1117 1148 1192 1786 1079 1188 1735 1071 1056 1261 1862 1133 1076 999 963 1112 1219 1452 1158 912 1092 980 1072 1158 997 1430 1410 883 1127 1129 2034 1667 848 806 1044 1419 1063 1084 1352 1563 1645 1947 1044 1049 1426 1343 1239 926 1876 1614 1155 1727 1523 1439 1389 1351 1884 887 833 1291 1044 2802 1503 1266 1686 1587 976 1057 953 1413 1279 1920 2352 1335 1068 1137 1101 1115 1031 1393 1182 1697 1190 1333 1423 1339 1169 1653 925 1223 1021 1669 914 887 810 1196 1759 2035 2084 1821 1157 1877 1860 1709 1649 1404 1450 1216 1860 1191 1760 1449 1189 1062 964 1135 874 1062 2802 1598 1190 1126 1000 1123 1068 1166 1057 828 906 756 562 584 480 447 599 1029 593 633 695 713 739 675 860 1104 1244 1116 928 914 513 765 599 625 921 1243 741 1100 1219 668 773 505 449 616 609 671 530 512 753 632 665 840")
	expected4 := []float64{}
	result4 := BltMad(data4, tau)
	if !equalSlices(expected4, result4) {
		t.Errorf("Test case 4 failed. Got: %f, Expected: %f", result4, expected4)
	}
}

//double check the outputs and try them on a simpler arrays
func TestBGP0(t *testing.T) {
	//tau := 0.0 //the outputs should contain every number greater than the median of the data set since no MAD adjustments were made
	//simpler array test cases

	/*//Test case 2: bgp data 1
	data2 := convertToFloat64Array("782 958 830 832 952 852 923 1008 1041 974 943 1013 943 1151 769 1236 819 698 730 849 871 632 522 664 574 614 659 515 901 939 438 2942 1406 14065 5771 3622 1047 2111 1813 2761 1587 1158 786 1070 1040 778 783 912 716 913 937 863 836 791 898 834 909 812 16974 805 1229 1189 851 889 767 838 711 894 812 853 930 1045 858 1025 784 2083 1061 809 877 800 740 806 811 1023 1252 1149 838 986 969 728 819 689 880 754 836 1176 867 879 2602 662 737 888 723 983 858 876 740 771 810 1005 791 845 942 750 727 938 815 1067 1068 788 687 770 836 1032 889 1030 1049 1042 1020 1113 875 777 877 1017 1018 1236 856 989 918 821 684 790 773 955 927 828 748 924 996 985 926 853 738 844 802 639 822 859 777 850 738 696 975 1183 803 936 826 958 910 855 872 799 809 882 951 758 781 816 543 873 751 786 680 860 871 962 893 629 912 766 847 642 702 925 881 2498 3435 25746 5521 833 804 701 530 804 737 802 532 672 655 2805 835 681 739 641 836 826 812 909 1193 873 540 829 763 894 973 2")
	expected2 := convertToFloat64Array("855.000000 856.000000 858.000000 858.000000 859.000000 860.000000 863.000000 867.000000 871.000000 871.000000 872.000000 873.000000 873.000000 875.000000 876.000000 877.000000 877.000000 879.000000 880.000000 881.000000 882.000000 888.000000 889.000000 889.000000 893.000000 894.000000 894.000000 898.000000 901.000000 909.000000 909.000000 910.000000 912.000000 912.000000 913.000000 918.000000 923.000000 924.000000 925.000000 926.000000 927.000000 930.000000 936.000000 937.000000 938.000000 939.000000 942.000000 943.000000 943.000000 951.000000 952.000000 955.000000 958.000000 958.000000 962.000000 969.000000 973.000000 974.000000 975.000000 983.000000 985.000000 986.000000 989.000000 996.000000 1005.000000 1008.000000 1013.000000 1017.000000 1018.000000 1020.000000 1023.000000 1025.000000 1030.000000 1032.000000 1040.000000 1041.000000 1042.000000 1045.000000 1047.000000 1049.000000 1061.000000 1067.000000 1068.000000 1070.000000 1113.000000 1149.000000 1151.000000 1158.000000 1176.000000 1183.000000 1189.000000 1193.000000 1229.000000 1236.000000 1236.000000 1252.000000 1406.000000 1587.000000 1813.000000 2083.000000 2111.000000 2498.000000 2602.000000 2761.000000 2805.000000 2942.000000 3435.000000 3622.000000 5521.000000 5771.000000 14065.000000 16974.000000 25746.000000")
	result2 := BltMad(data2, tau)
	if !equalSlices(expected2, result2) {
		t.Errorf("Test case 2 failed. Got: %f, Expected: %f", result2, expected2)
	}

	//Test case 3: bgp data 2
	data3 := convertToFloat64Array("1299 637 535 829 825 447 562 761 1028 788 918 977 810 654 554 397 473 368 582 522 530 433 653 486 625 479 713 731 488 692 518 465 896 625 687 704 666 767 632 892 601 554 602 441 578 565 722 604 447 561 550 591 578 1595 1987 450 512 805 678 536 811 895 1099 571 552 392 509 615 630 639 559 691 1309 554 926 553 473 715 465 505 726 833 632 596 550 631 1016 836 939 1086 1045 563 693 402 487 544 836 576 588 546 748 624 687 613 895 820 645 666 574 502 634 341 506 462 40552 817 1415 317 122393 4146 3468 613 6055 354 533 2931 535 6627 6918 6859 1970 1199 5209 5053 443 3102 453 18547 475 439 1131 708 2699 14028 18914 18984 16322 20613 24264 23391 10482 4600 2368 2471 2018 1333 1607 1888 1993 1850 1714 3804 1749 2404 722 936 1108 1471 809 820 1699 1680 1135 873 1023 1231 1128 1000 1112 1163 976 788 902 2898 1073 986 1470 531 598 516 515 481 538 768 676 596 502 518 570 497 473 491 488 619 676 462 486 722 712 391 463 434 553 541 686 524 493 425 550 560 482 584 509 630 554 385 565 517 605 433 608 411 525 542 678 521 525 358 684 422 1742 511 604 511 485 376 464 385 634 710 472 434 421 469 565 511 462 429 498 421 530 492 479 554 576 377 459 551 612 462 464 455 563 679 652 533 479 812 981 627 522 426 495 525 512 537 488 483 362 783 463 522 374 431 566 510 787 1214 1238 1045 978 917 728 600 446 619 504 874 861 35956 790 341 540 1240 118534 3391 1758 1687 3880 339 829 5775 371 653 354 435 6034 2731 1027 627 408 423 14291 315 4698 9423 19043 17045 20954 15955 17328 24117 12745 7667 10102 3472 2246 1588 2447 3962 1929 2067 2366 2902 1287 781 736 991 726 900 2185 1613 602 703 913 2700 963 865 924 743 1526 668 880 887 1872 1163 1432 1071 704 570 511 527 1267 861 913 645 468 480 566 602 534 592 535 500 464 612 526 731 622 746 525 447 506 538 746 592 407 478 343 489 503 478 626 615 640 603 405 537 582 647 747 480 436 632 455 378 477 537 468 737 818 520 546 556 506 1")
	expected3 := convertToFloat64Array("1166.000000 1167.000000 1168.000000 1169.000000 1171.000000 1177.000000 1182.000000 1184.000000 1186.000000 1188.000000 1188.000000 1189.000000 1189.000000 1189.000000 1190.000000 1190.000000 1191.000000 1192.000000 1194.000000 1196.000000 1197.000000 1213.000000 1213.000000 1213.000000 1216.000000 1217.000000 1219.000000 1219.000000 1219.000000 1223.000000 1224.000000 1231.000000 1231.000000 1232.000000 1233.000000 1235.000000 1236.000000 1238.000000 1239.000000 1243.000000 1244.000000 1248.000000 1251.000000 1256.000000 1256.000000 1257.000000 1261.000000 1266.000000 1279.000000 1283.000000 1291.000000 1291.000000 1293.000000 1293.000000 1294.000000 1295.000000 1296.000000 1307.000000 1322.000000 1323.000000 1330.000000 1330.000000 1333.000000 1335.000000 1339.000000 1342.000000 1343.000000 1351.000000 1352.000000 1357.000000 1361.000000 1368.000000 1385.000000 1387.000000 1389.000000 1393.000000 1396.000000 1403.000000 1404.000000 1410.000000 1412.000000 1413.000000 1419.000000 1423.000000 1426.000000 1430.000000 1434.000000 1435.000000 1436.000000 1439.000000 1440.000000 1445.000000 1448.000000 1449.000000 1450.000000 1452.000000 1456.000000 1467.000000 1469.000000 1481.000000 1481.000000 1484.000000 1484.000000 1492.000000 1492.000000 1495.000000 1499.000000 1503.000000 1511.000000 1523.000000 1528.000000 1529.000000 1547.000000 1563.000000 1564.000000 1573.000000 1580.000000 1584.000000 1587.000000 1597.000000 1598.000000 1609.000000 1614.000000 1618.000000 1630.000000 1635.000000 1645.000000 1649.000000 1653.000000 1654.000000 1655.000000 1662.000000 1667.000000 1669.000000 1669.000000 1683.000000 1686.000000 1690.000000 1693.000000 1697.000000 1709.000000 1727.000000 1727.000000 1728.000000 1735.000000 1742.000000 1759.000000 1760.000000 1786.000000 1789.000000 1821.000000 1828.000000 1834.000000 1839.000000 1847.000000 1860.000000 1860.000000 1862.000000 1875.000000 1876.000000 1877.000000 1884.000000 1886.000000 1893.000000 1900.000000 1920.000000 1947.000000 1976.000000 1990.000000 2002.000000 2034.000000 2035.000000 2051.000000 2053.000000 2084.000000 2122.000000 2132.000000 2228.000000 2305.000000 2314.000000 2352.000000 2357.000000 2436.000000 2438.000000 2509.000000 2542.000000 2555.000000 2640.000000 2701.000000 2802.000000 2802.000000 2864.000000 2909.000000 3888.000000 4166.000000")
	result3 := BltMad(data3, tau)
	if !equalSlices(expected3, result3) {
		t.Errorf("Test case 3 failed. Got: %f, Expected: %f", result3, expected3)
	}

	//Test case 4: bgp data 3
	data4 := convertToFloat64Array("1690 1257 1231 934 887 901 834 1188 1213 1025 948 782 893 1893 917 1235 1469 795 1043 1009 1026 675 685 1293 870 945 1484 1023 1177 1900 1385 1528 1291 1481 1564 1361 1070 1217 1164 994 1129 1224 1342 1009 1847 745 1070 960 962 1052 798 724 841 1031 963 1189 871 1436 1013 1149 1403 1083 1018 1435 1036 1052 1100 1499 1448 1119 1547 1129 1152 1197 2909 2053 935 1294 1219 890 1330 1669 1293 1189 1236 1213 956 1484 1151 1232 1231 1742 1171 1114 1167 1330 1834 844 907 932 1233 1085 1618 873 757 829 1481 1976 1129 966 1387 1322 1248 1580 1727 2509 1063 1307 1078 1038 767 1283 1655 1875 954 1094 1055 1584 1654 1990 4166 3888 1108 1440 2228 1683 1529 2542 822 1168 2002 2864 1323 1150 1213 1238 1076 800 779 1492 2640 1492 1051 1456 847 695 792 1186 1396 1630 1163 1467 2305 871 1597 1693 2357 1728 2132 1256 2314 955 1511 1609 1296 858 2701 2436 982 1090 1256 1105 965 1828 2555 1184 1295 1194 839 839 1000 1051 959 883 848 1001 2438 1635 1789 1886 1368 2051 991 1251 1412 1839 1573 1445 1495 1434 1357 1162 1049 937 1662 2122 978 1120 1012 952 1117 1148 1192 1786 1079 1188 1735 1071 1056 1261 1862 1133 1076 999 963 1112 1219 1452 1158 912 1092 980 1072 1158 997 1430 1410 883 1127 1129 2034 1667 848 806 1044 1419 1063 1084 1352 1563 1645 1947 1044 1049 1426 1343 1239 926 1876 1614 1155 1727 1523 1439 1389 1351 1884 887 833 1291 1044 2802 1503 1266 1686 1587 976 1057 953 1413 1279 1920 2352 1335 1068 1137 1101 1115 1031 1393 1182 1697 1190 1333 1423 1339 1169 1653 925 1223 1021 1669 914 887 810 1196 1759 2035 2084 1821 1157 1877 1860 1709 1649 1404 1450 1216 1860 1191 1760 1449 1189 1062 964 1135 874 1062 2802 1598 1190 1126 1000 1123 1068 1166 1057 828 906 756 562 584 480 447 599 1029 593 633 695 713 739 675 860 1104 1244 1116 928 914 513 765 599 625 921 1243 741 1100 1219 668 773 505 449 616 609 671 530 512 753 632 665 840")
	expected4 := []float64{}
	result4 := BltMad(data4, tau)
	if !equalSlices(expected4, result4) {
		t.Errorf("Test case 4 failed. Got: %f, Expected: %f", result4, expected4)
	}*/
}
